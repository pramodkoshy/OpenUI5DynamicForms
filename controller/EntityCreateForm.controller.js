sap.ui.define(["sap/ui/core/mvc/ControllerExtension","sap/m/Label"],function(e,t){"use strict";return e.extend("com.supabase.easyui5.controller.EntityCreateForm",{initializeEntityData:function(e){const t={};const r=this.getModel("viewModel");const a=r.getProperty("/parentInfo");e.columns.forEach(e=>{if(a&&e.name===a.foreignKey){t[e.name]=a.parentId}else if(e.type==="boolean"){t[e.name]=false}else if(e.type==="number"){t[e.name]=0}else if(e.type==="date"){t[e.name]=(new Date).toISOString().split("T")[0]}else{t[e.name]=""}});r.setProperty("/entity",t)},configureForm:function(e){console.log("Configuring create form with metadata:",JSON.stringify(e,null,2));const r=this.getView().byId("entityCreateContainer");if(!r){console.error("Form container not found");return}r.removeAllFormElements();const a=this.getModel("viewModel");const o=a.getProperty("/entity");const n=a.getProperty("/parentInfo");console.log("Current Entity Data:",JSON.stringify(o,null,2));console.log("Parent Info:",JSON.stringify(n,null,2));const s="createForm_"+Date.now()+"_";const i=e.columns.filter(t=>!(t.editable===false||t.name===e.primaryKey||t.name==="created_at"||t.name==="updated_at"));i.forEach((e,a)=>{console.log(`Processing column: ${e.name}`);const o=e.required===true;const i=new sap.ui.layout.form.FormElement({label:new t({text:e.label||e.name,required:o})});const l="viewModel>/entity/"+e.name;const d=s+e.name+"_"+a;const c=n&&e.name===n.foreignKey;console.log(`Column ${e.name} - Type: ${e.type}`);try{const t=this.createInputField(e,l,o,d,c);if(t){i.addField(t);r.addFormElement(i);console.log(`Added form element for ${e.name}`)}else{console.error(`Failed to create control for ${e.name}`)}}catch(t){console.error(`Error creating control for ${e.name}:`,t)}});console.log(`Form configuration complete.`);const l=this.getView().byId("entityCreateForm");if(l){l.invalidate()}},createInputField:function(e,t,r,a,o){let n;if(o){n=new sap.m.Text({id:a,text:`Connected to parent ${this.getModel("viewModel").getProperty("/parentInfo/parentTable")} (ID: ${this.getModel("viewModel").getProperty("/parentInfo/parentId")})`});return n}switch(e.type){case"relation":n=new sap.m.ComboBox({id:a,selectedKey:{path:t},width:"100%",required:r,showSecondaryValues:true,valueState:"{= ${viewModel>/validationErrors/"+e.name+"} ? 'Error' : 'None' }",valueStateText:"{viewModel>/validationErrors/"+e.name+"}",selectionChange:this.createFieldChangeHandler(e)});this.loadRelationOptions(n,e.relation,e.name);break;case"boolean":n=new sap.m.CheckBox({id:a,selected:{path:t},width:"100%",select:this.createFieldChangeHandler(e)});break;case"date":n=new sap.m.DatePicker({id:a,value:{path:t,type:new sap.ui.model.type.Date({pattern:"yyyy-MM-dd"})},valueFormat:"yyyy-MM-dd",displayFormat:"medium",width:"100%",required:r,valueState:"{= ${viewModel>/validationErrors/"+e.name+"} ? 'Error' : 'None' }",valueStateText:"{viewModel>/validationErrors/"+e.name+"}"});break;case"number":n=new sap.m.Input({id:a,value:{path:t,type:new sap.ui.model.type.Float({minFractionDigits:0,maxFractionDigits:2})},type:"Number",width:"100%",required:r,valueState:"{= ${viewModel>/validationErrors/"+e.name+"} ? 'Error' : 'None' }",valueStateText:"{viewModel>/validationErrors/"+e.name+"}"});break;case"email":n=new sap.m.Input({id:a,value:{path:t},type:"Email",width:"100%",required:r,valueState:"{= ${viewModel>/validationErrors/"+e.name+"} ? 'Error' : 'None' }",valueStateText:"{viewModel>/validationErrors/"+e.name+"}"});break;case"text":n=new sap.m.TextArea({id:a,value:{path:t},rows:3,width:"100%",required:r,valueState:"{= ${viewModel>/validationErrors/"+e.name+"} ? 'Error' : 'None' }",valueStateText:"{viewModel>/validationErrors/"+e.name+"}"});break;default:n=new sap.m.Input({id:a,value:{path:t},width:"100%",required:r,valueState:"{= ${viewModel>/validationErrors/"+e.name+"} ? 'Error' : 'None' }",valueStateText:"{viewModel>/validationErrors/"+e.name+"}"})}if(n.setId){n.setId(this.getView().createId(e.name+"Input"))}return n},validateAndSaveEntity:function(e){const t=this.getModel("viewModel");const r=t.getProperty("/entity");console.log("Save pressed with entity data:",r);this.resetFormErrorStates();t.setProperty("/busy",true);return new Promise((a,o)=>{this.getTableMetadata(e).then(n=>{if(!this.validateForm(n,r)){this.showErrorMessage("Please correct the errors in the form");t.setProperty("/busy",false);o(new Error("Validation failed"));return}const s={};n.columns.forEach(e=>{if(e.editable===false&&e.name!==n.primaryKey||e.name===n.primaryKey){return}s[e.name]=r[e.name]});console.log("Data to insert:",s);this.getSupabaseClient().from(e).insert(s).then(({data:e,error:r})=>{t.setProperty("/busy",false);if(r){this.showErrorMessage("Error creating entity",r);o(r);return}const n=t.getProperty("/tableName");this.showSuccessMessage(n+" created successfully");a(e)}).catch(e=>{console.error("Error in Supabase query:",e);this.showErrorMessage("Error creating entity: "+e.message);t.setProperty("/busy",false);o(e)})}).catch(e=>{console.error("Error getting table metadata:",e);this.showErrorMessage("Error getting table metadata: "+e.message);t.setProperty("/busy",false);o(e)})})},_prepareEntityDataForSave:function(e,t){const r={};const a=e.columns.map(e=>e.name);console.log("Valid column names:",a);Object.keys(t).forEach(o=>{if(!a.includes(o)){console.log(`Skipping field '${o}' as it's not found in the schema`);return}const n=e.columns.find(e=>e.name===o);if(n&&n.editable===false&&o!==e.primaryKey){console.log(`Skipping non-editable field '${o}'`);return}if(o===e.primaryKey){console.log(`Skipping primary key field '${o}'`);return}r[o]=t[o]});console.log("Prepared data for save:",r);return r},onSavePress:function(){const e=this.getModel("viewModel");const t=e.getProperty("/tableId");const r=e.getProperty("/entity");console.log("Save pressed with entity data:",r);this._resetFormErrorStates();e.setProperty("/busy",true);this.getTableMetadata(t).then(a=>{if(!this._validateForm(a,r)){this.showErrorMessage("Please correct the errors in the form");e.setProperty("/busy",false);return}const o=this._prepareEntityDataForSave(a,r);console.log("Data to insert:",o);this.getSupabaseClient().from(t).insert(o).then(({data:r,error:a})=>{e.setProperty("/busy",false);if(a){this.showErrorMessage("Error creating entity",a);console.error("Error details:",a);return}const o=e.getProperty("/tableName");this.showSuccessMessage(o+" created successfully");const n=e.getProperty("/parentInfo");if(n&&n.parentTable&&n.parentId){sessionStorage.removeItem("parentEntityInfo");this.getRouter().navTo("entityDetail",{table:n.parentTable,id:n.parentId})}else{this.getRouter().navTo("entityList",{table:t})}}).catch(t=>{console.error("Error in Supabase query:",t);this.showErrorMessage("Error creating entity: "+t.message);e.setProperty("/busy",false)})}).catch(t=>{console.error("Error getting table metadata:",t);this.showErrorMessage("Error getting table metadata: "+t.message);e.setProperty("/busy",false)})}})});
//# sourceMappingURL=EntityCreateForm.controller.js.map